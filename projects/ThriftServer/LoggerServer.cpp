// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <fstream>

#include "Logger.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "log.h"
#include "Config.h"

ENABLE_DEBUG()

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::pairer;

class LoggerHandler : virtual public LoggerIf {
 public:
  LoggerHandler(const std::string& fname):fstream_(fname, std::ofstream::out) {
  }

  void logRequest(const RadiusRequest& request) {
      LOGGER_IN();
      fstream_ << "--------------\n";
      fstream_ << request << std::endl;
  }
protected:
    std::ofstream fstream_;
};

int main(int argc, char **argv) {
#ifdef DEBUG_ENABLED
    std::ofstream of("thrift.log");
    INIT_DEBUG(&of);
#endif

    try {
        Config config;

        shared_ptr<LoggerHandler> handler(new LoggerHandler(config.thriftLoggingFileName()));
        shared_ptr<TProcessor> processor(new LoggerProcessor(handler));
        shared_ptr<TServerTransport> serverTransport(new TServerSocket(config.thriftServerPort()));
        shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
        shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

        TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
        server.serve();
    }
    catch (std::exception& e) {
        std::cout << "ERROR: " << e.what() << std::endl;
    }
    return 0;
}

