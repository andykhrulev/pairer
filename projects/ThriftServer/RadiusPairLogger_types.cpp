/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RadiusPairLogger_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace pairer {


RadiusAvp::~RadiusAvp() throw() {
}


void RadiusAvp::__set_type(const int8_t val) {
  this->type = val;
}

void RadiusAvp::__set_value(const std::string& val) {
  this->value = val;
}

uint32_t RadiusAvp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RadiusAvp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RadiusAvp");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RadiusAvp &a, RadiusAvp &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.value, b.value);
}

RadiusAvp::RadiusAvp(const RadiusAvp& other0) {
  type = other0.type;
  value = other0.value;
}
RadiusAvp& RadiusAvp::operator=(const RadiusAvp& other1) {
  type = other1.type;
  value = other1.value;
  return *this;
}
void RadiusAvp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RadiusAvp(";
  out << "type=" << to_string(uint16_t(type));
  out << ", " << "value=" << to_string(value);
  out << ")";
}


RadiusRequest::~RadiusRequest() throw() {
}


void RadiusRequest::__set_captureTimestamp(const int32_t val) {
  this->captureTimestamp = val;
}

void RadiusRequest::__set_sourceId(const int32_t val) {
  this->sourceId = val;
}

void RadiusRequest::__set_avpRequestList(const std::vector<RadiusAvp> & val) {
  this->avpRequestList = val;
__isset.avpRequestList = true;
}

void RadiusRequest::__set_avpResponseList(const std::vector<RadiusAvp> & val) {
  this->avpResponseList = val;
__isset.avpResponseList = true;
}

uint32_t RadiusRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->captureTimestamp);
          this->__isset.captureTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sourceId);
          this->__isset.sourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->avpRequestList.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->avpRequestList.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->avpRequestList[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.avpRequestList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->avpResponseList.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->avpResponseList.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->avpResponseList[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.avpResponseList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RadiusRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RadiusRequest");

  xfer += oprot->writeFieldBegin("captureTimestamp", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->captureTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sourceId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.avpRequestList) {
    xfer += oprot->writeFieldBegin("avpRequestList", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->avpRequestList.size()));
      std::vector<RadiusAvp> ::const_iterator _iter12;
      for (_iter12 = this->avpRequestList.begin(); _iter12 != this->avpRequestList.end(); ++_iter12)
      {
        xfer += (*_iter12).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.avpResponseList) {
    xfer += oprot->writeFieldBegin("avpResponseList", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->avpResponseList.size()));
      std::vector<RadiusAvp> ::const_iterator _iter13;
      for (_iter13 = this->avpResponseList.begin(); _iter13 != this->avpResponseList.end(); ++_iter13)
      {
        xfer += (*_iter13).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RadiusRequest &a, RadiusRequest &b) {
  using ::std::swap;
  swap(a.captureTimestamp, b.captureTimestamp);
  swap(a.sourceId, b.sourceId);
  swap(a.avpRequestList, b.avpRequestList);
  swap(a.avpResponseList, b.avpResponseList);
  swap(a.__isset, b.__isset);
}

RadiusRequest::RadiusRequest(const RadiusRequest& other14) {
  captureTimestamp = other14.captureTimestamp;
  sourceId = other14.sourceId;
  avpRequestList = other14.avpRequestList;
  avpResponseList = other14.avpResponseList;
  __isset = other14.__isset;
}
RadiusRequest& RadiusRequest::operator=(const RadiusRequest& other15) {
  captureTimestamp = other15.captureTimestamp;
  sourceId = other15.sourceId;
  avpRequestList = other15.avpRequestList;
  avpResponseList = other15.avpResponseList;
  __isset = other15.__isset;
  return *this;
}
void RadiusRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RadiusRequest(";
  out << "captureTimestamp=" << to_string(captureTimestamp);
  out << ", " << "sourceId=" << to_string(sourceId);
  out << ", " << "avpRequestList="; (__isset.avpRequestList ? (out << to_string(avpRequestList)) : (out << "<null>"));
  out << ", " << "avpResponseList="; (__isset.avpResponseList ? (out << to_string(avpResponseList)) : (out << "<null>"));
  out << ")";
}

} // namespace
