/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Logger_H
#define Logger_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "RadiusPairLogger_types.h"

namespace pairer {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LoggerIf {
 public:
  virtual ~LoggerIf() {}
  virtual void logRequest(const RadiusRequest& request) = 0;
};

class LoggerIfFactory {
 public:
  typedef LoggerIf Handler;

  virtual ~LoggerIfFactory() {}

  virtual LoggerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LoggerIf* /* handler */) = 0;
};

class LoggerIfSingletonFactory : virtual public LoggerIfFactory {
 public:
  LoggerIfSingletonFactory(const boost::shared_ptr<LoggerIf>& iface) : iface_(iface) {}
  virtual ~LoggerIfSingletonFactory() {}

  virtual LoggerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LoggerIf* /* handler */) {}

 protected:
  boost::shared_ptr<LoggerIf> iface_;
};

class LoggerNull : virtual public LoggerIf {
 public:
  virtual ~LoggerNull() {}
  void logRequest(const RadiusRequest& /* request */) {
    return;
  }
};

typedef struct _Logger_logRequest_args__isset {
  _Logger_logRequest_args__isset() : request(false) {}
  bool request :1;
} _Logger_logRequest_args__isset;

class Logger_logRequest_args {
 public:

  Logger_logRequest_args(const Logger_logRequest_args&);
  Logger_logRequest_args& operator=(const Logger_logRequest_args&);
  Logger_logRequest_args() {
  }

  virtual ~Logger_logRequest_args() throw();
  RadiusRequest request;

  _Logger_logRequest_args__isset __isset;

  void __set_request(const RadiusRequest& val);

  bool operator == (const Logger_logRequest_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Logger_logRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_logRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_logRequest_pargs {
 public:


  virtual ~Logger_logRequest_pargs() throw();
  const RadiusRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class LoggerClient : virtual public LoggerIf {
 public:
  LoggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void logRequest(const RadiusRequest& request);
  void send_logRequest(const RadiusRequest& request);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LoggerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LoggerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LoggerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_logRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LoggerProcessor(boost::shared_ptr<LoggerIf> iface) :
    iface_(iface) {
    processMap_["logRequest"] = &LoggerProcessor::process_logRequest;
  }

  virtual ~LoggerProcessor() {}
};

class LoggerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LoggerProcessorFactory(const ::boost::shared_ptr< LoggerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LoggerIfFactory > handlerFactory_;
};

class LoggerMultiface : virtual public LoggerIf {
 public:
  LoggerMultiface(std::vector<boost::shared_ptr<LoggerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LoggerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LoggerIf> > ifaces_;
  LoggerMultiface() {}
  void add(boost::shared_ptr<LoggerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void logRequest(const RadiusRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logRequest(request);
    }
    ifaces_[i]->logRequest(request);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LoggerConcurrentClient : virtual public LoggerIf {
 public:
  LoggerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoggerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void logRequest(const RadiusRequest& request);
  void send_logRequest(const RadiusRequest& request);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
